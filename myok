'''
Here is the okex api example.

'''
import okex.v5.account_api as account
import okex.v5.market_api as market
import okex.v5.public_api as public
import okex.v5.trade_api as trade
import json
import datetime

import pandas as pd
import ta
from ta.trend import EMAIndicator
import schedule
import time

def get_usdt_balance():
    # account api test
    accountAPI = account.AccountAPI(api_key, secret_key, passphrase, False, test=test)
    accountAPI.set_api_url("https://www.okex.com")
    # usdt balance
    usdt = accountAPI.balance()[0]['details'][0]['cashBal']
    return usdt

def get_coin_balance():
    # account api test
    accountAPI = account.AccountAPI(api_key, secret_key, passphrase, False, test=test)
    accountAPI.set_api_url("https://www.okex.com")
    # usdt balance
    coin = accountAPI.balance()[0]['details'][0]['cashBal']
    return coin

def get_candle_df(instId):
    # market
    marketAPI = market.MarketAPI(api_key, secret_key, passphrase, False, test=test)
    marketAPI.set_api_url("https://www.okex.com")
    df = marketAPI.candles(instId= instId , bar= '1m')
    candle_df = df.sort_values(by = 'ts',ascending= True) # from old time to new time
    candle_df['ema33'] = EMAIndicator(candle_df['c'], window= 33).ema_indicator()
    candle_df['ema55'] = EMAIndicator(candle_df['c'], window= 55).ema_indicator()
    return candle_df

def get_last_price(instId):
    # market
    marketAPI = market.MarketAPI(api_key, secret_key, passphrase, False, test=test)
    marketAPI.set_api_url("https://www.okex.com")
    price = marketAPI.ticker(instId)['last'][0]
    return price

#default market order, no price needed
def place_order(intstId, sz, px):
    # trade
    from okex.v5.trade_api import TdMode, OrderType
    tradeAPI = trade.TradeAPI(api_key, secret_key, passphrase, False, test=test)
    tradeAPI.set_api_url("https://www.okex.com")
    price = str.format('%f'% px)
    result = tradeAPI.order(intstId, TdMode.CASH, OrderType.LIMIT, sz = sz, px = price)
    return result

def cross_check(df):
    global direction
    pos = 0
    diff = df['ema33'][pos] - df['ema55'][pos]
    if (diff >= 0) and (direction == 1):
        print("ema33 %f,  ema55 %f ,bull market,keep full" % (df['ema33'][pos], df['ema55'][pos]))

    elif (diff < 0 and direction == 1):
        print("ema33 %f,  ema55 %f ,bad cross,sell all" % (df['ema33'][pos] ,df['ema55'][pos]))
        get_coin_balance_and_sell()
        direction = 0

    elif (diff >= 0) and (direction == 0):
        print("ema33 %f,  ema55 %f ,good cross,buy all" % (df['ema33'][pos], df['ema55'][pos]))
        get_usdt_balance_and_buy()
        direction = 1

    elif (diff < 0 and direction == 0):
        print("ema33 %f,  ema55 %f ,bear marker,keep empty" % (df['ema33'][pos] ,df['ema55'][pos]))

def get_coin_balance_and_sell():
    coin_amount = float(get_coin_balance())*-1
    price = float(get_last_price('TRX-USDT'))
    #sell all coin
    if abs(coin_amount) > 1:
        order = place_order('TRX-USDT',coin_amount, price)
        return order

def get_usdt_balance_and_buy():
    usdt = float(get_usdt_balance())
    price = float(get_last_price('TRX-USDT'))
    print(price)
    #buy all coin
    buy_amount = usdt/price
    print(buy_amount)
    if buy_amount > 0.1:
        order = place_order('TRX-USDT', buy_amount, price)
        return order

def run():
    df = get_candle_df('TRX-USDT')
    cross_check(df)

if __name__ == '__main__':
    #key
    with open('api.json', 'r', encoding='utf-8') as f:
        obj = json.loads(f.read())
    api_key = obj['api_key']
    secret_key = obj['secret_key']
    passphrase = obj['passphrase']
    #init para
    direction = 1  # init direction is upward（ema33 在 ema55 之上）
    test = False  # shipan mode
    pair = 'TRX-USDT'

    schedule.every(1).minutes.do(run)
    while True:
        schedule.run_pending()
        time.sleep(1)
